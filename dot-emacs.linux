(package-initialize)
(require 'xcscope)
(require 'ac-haskell-process)

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(c-basic-offset 2)
 '(c-default-style
   (quote
    ((c-mode . "")
     (c++-mode . "")
     (objc-mode . "")
     (awk-mode . "awk")
     (other . "gnu"))))
 '(c-offsets-alist (quote ((label . 0) (inextern-lang . 0) (innamespace . 0))))
 '(c-report-syntactic-errors t)
 '(change-major-mode-with-file-name t)
 '(column-number-mode t)
 '(compilation-message-face (quote default))
 '(custom-enabled-themes (quote (monokai)))
 '(custom-safe-themes
   (quote
    ("c3d4af771cbe0501d5a865656802788a9a0ff9cf10a7df704ec8b8ef69017c68" default)))
 '(display-time-day-and-date t)
 '(display-time-format "%D (%A) | %R ")
 '(display-time-mode t)
 '(fill-column 60)
 '(font-lock-maximum-decoration t)
 '(global-company-mode t)
 '(global-flycheck-mode t)
 '(global-hl-line-mode t)
 '(global-linum-mode t)
 '(haskell-doc-prettify-types nil)
 '(haskell-font-lock-symbols nil)
 '(haskell-hoogle-command "/home/swami/.cabal/bin/hoogle")
 '(haskell-indent-spaces 2)
 '(haskell-mode-hook (quote (turn-on-haskell-indentation turn-on-haskell-doc)))
 '(haskell-process-path-cabal "/usr/local/bin/cabal")
 '(haskell-process-path-cabal-ghci "/usr/local/bin/cabal repl")
 '(haskell-process-path-ghci "/usr/local/bin/ghci")
 '(haskell-process-prompt-restart-on-cabal-change nil)
 '(haskell-process-suggest-remove-import-lines t)
 '(haskell-process-type (quote ghci))
 '(highlight-changes-colors ("#FD5FF0" "#AE81FF"))
 '(hl-bg-colors
   (quote
    ("#7B6000" "#8B2C02" "#990A1B" "#93115C" "#3F4D91" "#00629D" "#00736F" "#546E00")))
 '(hl-fg-colors
   (quote
    ("#002b36" "#002b36" "#002b36" "#002b36" "#002b36" "#002b36" "#002b36" "#002b36")))
 '(hl-paren-colors (quote ("#2aa198" "#b58900" "#268bd2" "#6c71c4" "#859900")))
 '(indent-tabs-mode nil)
 '(inhibit-startup-screen t)
 '(initial-scratch-message nil)
 '(irony-cdb-search-directory-list
   (quote
    ("." "build" ".." "../.." "../../../" "../../../../")))
 '(irony-server-install-prefix "/home/swami/.emacs.d/irony/bin")
 '(linum-format "%5d ")
 '(make-backup-files nil)
 '(menu-bar-mode nil)
 '(package-archives
   (quote
    (("gnu" . "http://elpa.gnu.org/packages/")
     ("melpa" . "http://melpa.org/packages/"))))
 '(package-selected-packages
   (quote
    (irony forth-mode csharp-mode fsharp-mode fstar-mode darkokai-theme xcscope utop tuareg tabbar pbcopy monokai-theme llvm-mode irony-eldoc idris-mode flycheck-irony company-irony-c-headers company-irony column-marker cmake-mode clang-format ac-haskell-process)))
 '(show-paren-delay 0.25)
 '(show-paren-mode t)
 '(show-paren-style (quote mixed))
 '(size-indication-mode t)
 '(tab-width 2)
 '(tabbar-background-color nil)
 '(tabbar-mode t nil (tabbar))
 '(tabbar-mwheel-mode t nil (tabbar))
 '(tabbar-separator (quote (" | ")))
 '(tabbar-use-images nil)
 '(tool-bar-mode nil))


(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(default ((t (:inherit nil :stipple nil :background nil :foreground "#F8F8F2" :inverse-video nil :box nil :strike-through nil :overline nil :underline nil :slant normal :weight normal :height 162 :width normal :family "Inconsolata"))))
 '(error ((t (:foreground "firebrick1"))))
 '(fixed-pitch ((t (:family "Inconsolata"))))
 '(linum ((t (:background nil :foreground nil :weight ultra-light :family "Inconsolata"))))
 '(show-paren-match ((t (:inverse-video t :weight normal))))
 '(show-paren-mismatch ((t (:foreground "brightred" :inverse-video t :weight normal))))
 '(tabbar-separator ((t (:inherit tabbar-default))))
 '(tabbar-unselected ((t (:inherit tabbar-default)))))

;; Keyboard customization:

(global-set-key [(hyper right)] `next-multiframe-window)
(global-set-key [(hyper left)]  `previous-multiframe-window)
(global-set-key "\C-z" `undo)
(global-set-key "\C-v" `clipboard-yank)
(global-set-key "\C-b" `copy-region-as-kill)
(global-set-key "\M-g" `goto-line)
(global-set-key "\C-j" `fill-region)

(define-key global-map [\C-kp-end]    `end-of-line)
(define-key global-map [\C-kp-right]  `mark-sexp)
(define-key global-map  "\C-c\C-i"  `cscope-set-initial-directory)
(define-key global-map  "\C-c\C-r"  `cscope-unset-initial-directory)
(define-key global-map  [f1] `cscope-pop-mark)
(define-key global-map  [f2] `cscope-find-this-text-string)
(define-key global-map  [f3] `cscope-find-functions-calling-this-function)
(define-key global-map  [f4]  `cscope-find-this-symbol)
(define-key global-map  [f5]  `cscope-find-this-file)
(define-key global-map  [f6]  `cscope-find-global-definition-no-prompting)
(define-key global-map  [f7]  `cscope-find-global-definition)

(define-key global-map [(meta z)] `undo)
(define-key global-map [(meta v)]  `clipboard-yank)
(define-key global-map [(meta c)]  `copy-region-as-kill)
(define-key global-map [(meta up)] `beginning-of-buffer)
(define-key global-map [(meta down)]  `end-of-buffer)

(define-key global-map [(meta {)] `tabbar-backward)
(define-key global-map [(meta })] `tabbar-forward)

(define-key input-decode-map "\e\eOA" [(meta up)])
(define-key input-decode-map "\e\eOB" [(meta down)])
(global-set-key [(meta up)] 'backward-paragraph )
(global-set-key [(meta down)] 'forward-paragraph )
(global-set-key (kbd "C-c ;") 'iedit-mode)
(add-hook 'before-save-hook 'delete-trailing-whitespace)

(add-hook 'c++-mode-hook 'irony-mode)
(add-hook 'c-mode-hook 'irony-mode)
(add-hook 'objc-mode-hook 'irony-mode)
(add-hook 'irony-mode-hook
          'irony-cdb-autosetup-compile-options)
(add-hook 'irony-mode-hook #'irony-eldoc)

;; (eval-after-load 'flycheck '(add-hook 'flycheck-mode-hook #'flycheck-irony-setup))


(eval-after-load 'company
  '(add-to-list 'company-backends 'company-irony))

(defun set-auto-complete-as-completion-at-point-function ()
  (add-to-list 'completion-at-point-functions 'auto-complete))
(add-hook 'auto-complete-mode-hook 'set-auto-complete-as-completion-at-point-function)
(add-to-list 'ac-modes 'haskell-interactive-mode)
(add-hook 'haskell-interactive-mode-hook 'set-auto-complete-as-completion-at-point-function)
(add-hook 'haskell-mode-hook 'set-auto-complete-as-completion-at-point-function)
(eval-after-load 'haskell-mode
  '(define-key haskell-mode-map (kbd "C-c C-d") 'ac-haskell-process-popup-doc))

(set-face-attribute 'default nil :height 160)
(put 'downcase-region 'disabled nil)
(setq ac-ignore-case nil)
(setq reb-re-syntax 'string)
