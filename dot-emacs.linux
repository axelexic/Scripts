;;
;; Copyright (C) 2005 by Yogesh Prem Swami. All rights reserved.
;; I am not responsible in any way for any damage that might
;; occur beacuse of the use of this file. By using this file,
;; you are agreeing to the above conditions.
;;


;; First add my own load path to allow xemacs and stuff like that


(require 'xcscope)
(require 'tabbar)

(setq default-frame-alist '(
			    (tool-bar-lines         . 0)
			    (menu-bar-lines         . 0)
			    (border-color           . "White")
			    (cursor-color           . "Yellow")
			    (mouse-color            . "SpringGreen2")
			    (foreground-color       . "White")
			    (background-color       . "Black")
			    (internal-border-width  . 0)
			    (default-fringes-outside-margins . 0)
			    (default-left-fringe-width . 0)
			    (default-left-margin-width . 0)
			    (width  . 200) ;; set for 27inch iMac
			    (height . 65)
			    (top . 20)
			    (left . 150)
			    ))


(split-window-horizontally)
(setq inhibit-startup-message t)
(setq make-backup-files nil)
(setq vc-make-backup-files nil)
(setq scroll-step 0)
(setq scroll-preserve-screen-position t)
(setq scroll-conservatively 5)
(setq next-screen-context-lines 1)
(display-time)
(show-paren-mode 1)

(setq line-number-mode 1)
(setq column-number-mode 1)
(setq fill-column 80)

(global-set-key [(hyper right)] `next-multiframe-window)
(global-set-key [(hyper left)]  `previous-multiframe-window)
(global-set-key "\C-z" `undo)
(global-set-key "\C-v" `clipboard-yank)
(global-set-key "\C-b" `copy-region-as-kill)
(global-set-key "\M-g" `goto-line)
(global-set-key "\C-j" `fill-region)
(global-set-key  [(f1)]  (lambda () (interactive) (manual-entry (current-word))))

;(define-key global-map [f2]           `find-file)
;(define-key global-map [f3]           `copy-region-as-kill)

(define-key global-map [f8]           `goto-line)
(define-key global-map [\C-f8]        `what-line)
(define-key global-map [f9]          `kill-ring-save)
(define-key global-map [\C-kp-end]    `end-of-line)
(define-key global-map [\C-kp-right]  `mark-sexp)
(define-key global-map  "\C-c\C-i"  `cscope-set-initial-directory)
(define-key global-map  "\C-c\C-r"  `cscope-unset-initial-directory)
(define-key global-map  [f4]  `cscope-find-this-symbol)
(define-key global-map  [f7]  `cscope-find-global-definition)
(define-key global-map  [f6]  `cscope-find-global-definition-no-prompting)
(define-key global-map  [f5]  `cscope-pop-mark)
; (define-key global-map [(meta .)]  `point-to-register)
(define-key global-map [(meta ,)]  `cscope-pop-mark)		  

(define-key global-map [(meta +)]  `point-to-register)
(define-key global-map [(meta -)]  `jump-to-register)		  

(define-key global-map "\C-c\C-b"  `cscope-display-buffer)
(define-key global-map "\C-c\C-t" `cscope-display-buffer-toggle)
(define-key global-map [(meta z)] `undo)
(define-key global-map [(meta v)]  `clipboard-yank)
(define-key global-map [(meta c)]  `copy-region-as-kill)
(define-key global-map [(meta up)] `beginning-of-buffer)
(define-key global-map [(meta down)]  `end-of-buffer)
(global-set-key  [(f1)]  (lambda () (interactive) (manual-entry (current-word))))


(require `cc-mode)
(setq indent-tabs-mode nil)
(setq c-default-style "linux")

;; No tabs; only spaces. 
(add-hook `c++-mode-hook `(lambda ()
			    (setq indent-tabs-mode nil)))
(add-hook `c-mode-hook `(lambda ()
			  (setq indent-tabs-mode nil)))

;; Let emacs do all the work. Why can't it not even write the code for us :-)
(setq c-auto-newline 1)

;; HATE spaces like hell.
(setq show-trailing-whitespace t)


(global-set-key "\C-m" `newline-and-indent)
(add-hook `c++-mode-hook `turn-on-auto-fill)
(add-hook `c-mode-hook `turn-on-auto-fill)
(c-toggle-hungry-state 1)

(defun run-save-and-compile ()
  (interactive "")
  (save-buffer 0)
  (compile "make"))

(define-key c-mode-map "\C-c\C-c" `run-save-and-compile)

(add-hook `html-mode-hook `turn-on-auto-fill)
(add-hook `sgml-mode-hook `turn-on-auto-fill)

(add-hook `text-mode-hook `turn-on-auto-fill)
(setq tex-default-mode `latex-mode)
(add-hook `latex-mode-hook `turn-on-auto-fill)
(add-hook `latex-mode-hook (function (lambda() (local-set-key [\C-return] `tex-file))))


(add-hook `c++-mode-hook `(lambda ()
			    (setq fill-column 80)))
(add-hook `c-mode-hook `(lambda ()
			  (setq fill-column 80)))

(add-hook `html-mode-hook `(lambda ()
			    (setq fill-column 80)))

(add-hook `latex-mode-hook `(lambda ()
			    (setq fill-column 80)))


(add-hook `c++-mode-hook `(lambda ()
			    (setq comment-column 50)))
(add-hook `c-mode-hook `(lambda ()
			  (setq comment-column 50)))


 (cond ((fboundp `global-font-lock-mode)
       (setq font-lock-face-attributes
 	     `((font-lock-comment-face       "Orchid") ;MediumOrchid
 	       (font-lock-string-face        "Red1") ;  MediumPurple1, IndianRed
 	       (font-lock-constant-face      "Goldenrod")
 	       (font-lock-keyword-face       "DeepSkyBlue1");Magenta, MediumBlue
 	       (font-lock-variable-name-face "yellow")     ;OrangeRed
 	       (font-lock-type-face          "Green1")
 	      ;; (font-lock-reference-face     "greenyellow")    ;LimeGreen
 	      ;; (font-lock-doc-string-face    "light slate blue")
 	      (font-lock-function-name-face "deep pink")
 	       ))
 
        ;; Load the font-lock package.
        (require `font-lock)
        ;; Maximum colors
        (setq font-lock-maximum-decoration t)
        ;;(set-face-background `font-lock-function-name-face "white")
        (set-face-background `show-paren-match-face "pale green")
        (set-face-foreground `show-paren-match-face "black")
        (make-face-bold `show-paren-match-face)
        (set-face-background `show-paren-mismatch-face "red")
        (set-face-foreground `show-paren-mismatch-face "snow")
        (make-face-bold `show-paren-mismatch-face)
	(make-face-bold `font-lock-function-name-face )
	(make-face-italic `font-lock-keyword-face)
        ;; Turn on font-lock in all modes that support it
       (global-font-lock-mode t)))

(global-set-key "%" `goto-matching-paren-or-insert)


(setq transient-mark-mode t)
(set-face-background `region "grey40")

(make-face-bold `font-lock-function-name-face)
(setq eshell-save-history-on-exit t) 


(tabbar-mode 1)
(define-key global-map [(meta {)] `tabbar-backward)
(define-key global-map [(meta })] `tabbar-forward)


(copy-face `default  `minibuffer-prompt)
(make-face-bold `minibuffer-prompt nil 1)

(add-to-list 'auto-mode-alist '("\\.cu$" . c++-mode))

(add-to-list
      'default-frame-alist
      '(font . "-*-DejaVu Sans Mono-normal-normal-normal-*-16-*-*-*-*-*-*-*"))

(tool-bar-mode 0)
(menu-bar-mode 0)
(setq make-backup-files nil)
